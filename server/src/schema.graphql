scalar Upload

type Query {
  users: [User!]!
  user(id: ID!): User!

  posts(orderBy: String, postType: String): [Post!]!
  post(slug: String!): Post!

  events(orderBy: String): [Event!]!
  event(slug: String!): Event!

  siteSettings: SiteSettings!

  links: [Link!]!
  link(id: ID!): Link!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(data: UpdateUserInput!, id: ID!): User!
  deleteUser(id: ID!): User!
  loginUser(data: LoginUserInput!): AuthPayload!

  createPost(data: CreatePostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  deletePost(id: ID!): Post!

  createEvent(data: CreateEventInput!): Event!
  updateEvent(id: ID!, data: UpdateEventInput!): Event!
  deleteEvent(id: ID!): Event!

  createLink(data: CreateLinkInput!): Link!
  updateLink(id: ID!, data: UpdateLinkInput!): Link!
  deleteLink(id: ID!): Link!

  updateSiteSettings(data: UpdateSiteSettings!): SiteSettings!

  uploadPhoto(photo: Upload!): UploadPayload!
}

type UploadPayload {
  photo: String!
}

type User {
  id: String!
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
  posts: [Post!]!
  events: [Event!]!
  updatedAt: String!
  createdAt: String!
}

input CreateUserInput {
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
}

input UpdateUserInput {
  nameSurname: String
  username: String
  password: String
  userType: UserType
}

input LoginUserInput {
  username: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: String!
}

type Post {
  id: String!
  title: String!
  slug: String!
  postType: PostType!
  photo: String
  content: String
  publishDate: String!
  viewCount: Int
  likeCount: Int
  user: User!
  createdAt: String!
  updatedAt: String!
}

input CreatePostInput {
  title: String!
  photo: String
  content: String
  postType: PostType!
  publishDate: String
  viewCount: Int
  likeCount: Int
}

input UpdatePostInput {
  title: String
  photo: String
  content: String
  postType: PostType
  publishDate: String
  viewCount: Int
  likeCount: Int
}

type Event {
  id: String!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: String!
  startDate: String
  endDate: String
  viewCount: Int
  likeCount: Int
  user: User!
  createdAt: String!
  updatedAt: String!
}

input CreateEventInput {
  title: String!
  photo: String
  content: String
  publishDate: String
  startDate: String
  endDate: String
  viewCount: Int
  likeCount: Int
}

input UpdateEventInput {
  title: String
  photo: String
  content: String
  publishDate: String
  startDate: String
  endDate: String
  viewCount: Int
  likeCount: Int
}

type SiteSettings {
  id: String!
  name: String!
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
  aboutHome: String
  socialLinks: [SocialLink!]!
}

input UpdateSiteSettings {
  name: String
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
  aboutHome: String
  socialLinks: [SocialLink!]!
}

type Link {
  id: String!
  name: String!
  url: String!
}

input CreateLinkInput {
  name: String!
  url: String!
}

input UpdateLinkInput {
  name: String
  url: String
}

enum UserType {
  ADMIN
  MODERATOR
}
enum PostType {
  NEWS
  ANNOUNCEMENT
}

enum SocialLink {
  FACEBOOK
  TWITTER
  INSTAGRAM
  YOUTUBE
}
