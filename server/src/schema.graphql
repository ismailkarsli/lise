scalar Upload

type Query {
  users: [User!]!
  user(id: ID!): User!

  news(orderBy: String): [New!]!
  new(id: ID!): New!

  announcements(orderBy: String): [Announcement!]!
  announcement(id: ID!): Announcement!

  events: [Event!]!
  event(id: ID!): Event!

  siteSettings: SiteSettings!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(data: UpdateUserInput!, id: ID!): User!
  deleteUser(id: ID!): User!
  loginUser(data: LoginUserInput!): AuthPayload!

  createNew(data: CreateNewInput!): New!
  updateNew(id: ID!, data: UpdateNewInput!): New!
  deleteNew(id: ID!): New!

  createAnnouncement(data: CreateAnnouncementInput!): Announcement!
  updateAnnouncement(data: UpdateAnnouncementInput!): Announcement!
  deleteAnnouncement(id: ID!): Announcement!

  createEvent(data: CreateEventInput!): Event!
  updateEvent(data: UpdateEventInput!): Event!
  deleteEvent(id: ID!): Event!

  updateSiteSettings(data: UpdateSiteSettings!): SiteSettings!

  uploadPhoto(photo: Upload!): UploadPayload!
}

type UploadPayload {
  photo: String!
}

type User {
  id: String!
  username: String!
  nameSurname: String
  password: String!
  userType: UserType!
  news: [New!]!
  announcements: [Announcement!]!
  events: [Event!]!
  updatedAt: String!
  createdAt: String!
}

input CreateUserInput {
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
}

input UpdateUserInput {
  nameSurname: String
  username: String
  password: String
  userType: UserType
}

input LoginUserInput {
  username: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: String!
}

type New {
  id: String!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: String!
  viewCount: Int
  likeCount: Int
  user: User!
  createdAt: String!
  updatedAt: String!
}

input CreateNewInput {
  title: String!
  photo: String
  content: String
  publishDate: String
  viewCount: Int
  likeCount: Int
}

input UpdateNewInput {
  title: String
  photo: String
  content: String
  publishDate: String
  viewCount: Int
  likeCount: Int
}

type Announcement {
  id: String!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: String!
  viewCount: Int
  likeCount: Int
  user: User!
  createdAt: String!
  updatedAt: String!
}

input CreateAnnouncementInput {
  title: String!
  photo: String
  content: String
  publishDate: String
  viewCount: Int
  likeCount: Int
}

input UpdateAnnouncementInput {
  title: String
  photo: String
  content: String
  publishDate: String
  viewCount: Int
  likeCount: Int
}

type Event {
  id: String!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: String!
  startDate: String
  endDate: String
  viewCount: Int
  likeCount: Int
  user: User!
  createdAt: String!
  updatedAt: String!
}

input CreateEventInput {
  title: String!
  photo: String
  content: String
  publishDate: String
  startDate: String
  endDate: String
  viewCount: Int
  likeCount: Int
}

input UpdateEventInput {
  title: String
  photo: String
  content: String
  publishDate: String
  startDate: String
  endDate: String
  viewCount: Int
  likeCount: Int
}

type SiteSettings {
  id: String!
  name: String!
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
}

input UpdateSiteSettings {
  name: String
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
}

enum UserType {
  ADMIN
  MODERATOR
}
