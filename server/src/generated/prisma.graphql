type AggregateAnnouncement {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateNew {
  count: Int!
}

type AggregateSiteSettings {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Announcement {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  viewCount: Int!
  likeCount: Int!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type AnnouncementConnection {
  pageInfo: PageInfo!
  edges: [AnnouncementEdge]!
  aggregate: AggregateAnnouncement!
}

input AnnouncementCreateInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  viewCount: Int
  likeCount: Int
  user: UserCreateOneWithoutAnnouncementsInput!
}

input AnnouncementCreateManyWithoutUserInput {
  create: [AnnouncementCreateWithoutUserInput!]
  connect: [AnnouncementWhereUniqueInput!]
}

input AnnouncementCreateWithoutUserInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  viewCount: Int
  likeCount: Int
}

type AnnouncementEdge {
  node: Announcement!
  cursor: String!
}

enum AnnouncementOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  photo_ASC
  photo_DESC
  content_ASC
  content_DESC
  publishDate_ASC
  publishDate_DESC
  viewCount_ASC
  viewCount_DESC
  likeCount_ASC
  likeCount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnnouncementPreviousValues {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  viewCount: Int!
  likeCount: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input AnnouncementScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AnnouncementScalarWhereInput!]
  OR: [AnnouncementScalarWhereInput!]
  NOT: [AnnouncementScalarWhereInput!]
}

type AnnouncementSubscriptionPayload {
  mutation: MutationType!
  node: Announcement
  updatedFields: [String!]
  previousValues: AnnouncementPreviousValues
}

input AnnouncementSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnnouncementWhereInput
  AND: [AnnouncementSubscriptionWhereInput!]
  OR: [AnnouncementSubscriptionWhereInput!]
  NOT: [AnnouncementSubscriptionWhereInput!]
}

input AnnouncementUpdateInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
  user: UserUpdateOneRequiredWithoutAnnouncementsInput
}

input AnnouncementUpdateManyDataInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
}

input AnnouncementUpdateManyMutationInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
}

input AnnouncementUpdateManyWithoutUserInput {
  create: [AnnouncementCreateWithoutUserInput!]
  delete: [AnnouncementWhereUniqueInput!]
  connect: [AnnouncementWhereUniqueInput!]
  set: [AnnouncementWhereUniqueInput!]
  disconnect: [AnnouncementWhereUniqueInput!]
  update: [AnnouncementUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [AnnouncementUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [AnnouncementScalarWhereInput!]
  updateMany: [AnnouncementUpdateManyWithWhereNestedInput!]
}

input AnnouncementUpdateManyWithWhereNestedInput {
  where: AnnouncementScalarWhereInput!
  data: AnnouncementUpdateManyDataInput!
}

input AnnouncementUpdateWithoutUserDataInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
}

input AnnouncementUpdateWithWhereUniqueWithoutUserInput {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateWithoutUserDataInput!
}

input AnnouncementUpsertWithWhereUniqueWithoutUserInput {
  where: AnnouncementWhereUniqueInput!
  update: AnnouncementUpdateWithoutUserDataInput!
  create: AnnouncementCreateWithoutUserInput!
}

input AnnouncementWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
}

input AnnouncementWhereUniqueInput {
  id: ID
  slug: String
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Event {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  startDate: DateTime
  endDate: DateTime
  viewCount: Int!
  likeCount: Int!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
  user: UserCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutUserInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  photo_ASC
  photo_DESC
  content_ASC
  content_DESC
  publishDate_ASC
  publishDate_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  viewCount_ASC
  viewCount_DESC
  likeCount_ASC
  likeCount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  startDate: DateTime
  endDate: DateTime
  viewCount: Int!
  likeCount: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input EventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
  user: UserUpdateOneRequiredWithoutEventsInput
}

input EventUpdateManyDataInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
}

input EventUpdateManyMutationInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
}

input EventUpdateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutUserDataInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutUserDataInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutUserDataInput!
  create: EventCreateWithoutUserInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
  slug: String
}

scalar Long

type Mutation {
  createAnnouncement(data: AnnouncementCreateInput!): Announcement!
  updateAnnouncement(data: AnnouncementUpdateInput!, where: AnnouncementWhereUniqueInput!): Announcement
  updateManyAnnouncements(data: AnnouncementUpdateManyMutationInput!, where: AnnouncementWhereInput): BatchPayload!
  upsertAnnouncement(where: AnnouncementWhereUniqueInput!, create: AnnouncementCreateInput!, update: AnnouncementUpdateInput!): Announcement!
  deleteAnnouncement(where: AnnouncementWhereUniqueInput!): Announcement
  deleteManyAnnouncements(where: AnnouncementWhereInput): BatchPayload!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createNew(data: NewCreateInput!): New!
  updateNew(data: NewUpdateInput!, where: NewWhereUniqueInput!): New
  updateManyNews(data: NewUpdateManyMutationInput!, where: NewWhereInput): BatchPayload!
  upsertNew(where: NewWhereUniqueInput!, create: NewCreateInput!, update: NewUpdateInput!): New!
  deleteNew(where: NewWhereUniqueInput!): New
  deleteManyNews(where: NewWhereInput): BatchPayload!
  createSiteSettings(data: SiteSettingsCreateInput!): SiteSettings!
  updateSiteSettings(data: SiteSettingsUpdateInput!, where: SiteSettingsWhereUniqueInput!): SiteSettings
  updateManySiteSettingses(data: SiteSettingsUpdateManyMutationInput!, where: SiteSettingsWhereInput): BatchPayload!
  upsertSiteSettings(where: SiteSettingsWhereUniqueInput!, create: SiteSettingsCreateInput!, update: SiteSettingsUpdateInput!): SiteSettings!
  deleteSiteSettings(where: SiteSettingsWhereUniqueInput!): SiteSettings
  deleteManySiteSettingses(where: SiteSettingsWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type New {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  viewCount: Int!
  likeCount: Int!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type NewConnection {
  pageInfo: PageInfo!
  edges: [NewEdge]!
  aggregate: AggregateNew!
}

input NewCreateInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  viewCount: Int
  likeCount: Int
  user: UserCreateOneWithoutNewsInput!
}

input NewCreateManyWithoutUserInput {
  create: [NewCreateWithoutUserInput!]
  connect: [NewWhereUniqueInput!]
}

input NewCreateWithoutUserInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  viewCount: Int
  likeCount: Int
}

type NewEdge {
  node: New!
  cursor: String!
}

enum NewOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  photo_ASC
  photo_DESC
  content_ASC
  content_DESC
  publishDate_ASC
  publishDate_DESC
  viewCount_ASC
  viewCount_DESC
  likeCount_ASC
  likeCount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NewPreviousValues {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  viewCount: Int!
  likeCount: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input NewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [NewScalarWhereInput!]
  OR: [NewScalarWhereInput!]
  NOT: [NewScalarWhereInput!]
}

type NewSubscriptionPayload {
  mutation: MutationType!
  node: New
  updatedFields: [String!]
  previousValues: NewPreviousValues
}

input NewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NewWhereInput
  AND: [NewSubscriptionWhereInput!]
  OR: [NewSubscriptionWhereInput!]
  NOT: [NewSubscriptionWhereInput!]
}

input NewUpdateInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
  user: UserUpdateOneRequiredWithoutNewsInput
}

input NewUpdateManyDataInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
}

input NewUpdateManyMutationInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
}

input NewUpdateManyWithoutUserInput {
  create: [NewCreateWithoutUserInput!]
  delete: [NewWhereUniqueInput!]
  connect: [NewWhereUniqueInput!]
  set: [NewWhereUniqueInput!]
  disconnect: [NewWhereUniqueInput!]
  update: [NewUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NewUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [NewScalarWhereInput!]
  updateMany: [NewUpdateManyWithWhereNestedInput!]
}

input NewUpdateManyWithWhereNestedInput {
  where: NewScalarWhereInput!
  data: NewUpdateManyDataInput!
}

input NewUpdateWithoutUserDataInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
}

input NewUpdateWithWhereUniqueWithoutUserInput {
  where: NewWhereUniqueInput!
  data: NewUpdateWithoutUserDataInput!
}

input NewUpsertWithWhereUniqueWithoutUserInput {
  where: NewWhereUniqueInput!
  update: NewUpdateWithoutUserDataInput!
  create: NewCreateWithoutUserInput!
}

input NewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [NewWhereInput!]
  OR: [NewWhereInput!]
  NOT: [NewWhereInput!]
}

input NewWhereUniqueInput {
  id: ID
  slug: String
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcements(where: AnnouncementWhereInput, orderBy: AnnouncementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Announcement]!
  announcementsConnection(where: AnnouncementWhereInput, orderBy: AnnouncementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnnouncementConnection!
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  new(where: NewWhereUniqueInput!): New
  news(where: NewWhereInput, orderBy: NewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [New]!
  newsConnection(where: NewWhereInput, orderBy: NewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NewConnection!
  siteSettings(where: SiteSettingsWhereUniqueInput!): SiteSettings
  siteSettingses(where: SiteSettingsWhereInput, orderBy: SiteSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SiteSettings]!
  siteSettingsesConnection(where: SiteSettingsWhereInput, orderBy: SiteSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SiteSettingsConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type SiteSettings {
  id: ID!
  name: String!
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
}

type SiteSettingsConnection {
  pageInfo: PageInfo!
  edges: [SiteSettingsEdge]!
  aggregate: AggregateSiteSettings!
}

input SiteSettingsCreateInput {
  id: ID
  name: String!
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
}

type SiteSettingsEdge {
  node: SiteSettings!
  cursor: String!
}

enum SiteSettingsOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  mail_ASC
  mail_DESC
  address_ASC
  address_DESC
  mapLongitude_ASC
  mapLongitude_DESC
  mapLatitude_ASC
  mapLatitude_DESC
  about_ASC
  about_DESC
}

type SiteSettingsPreviousValues {
  id: ID!
  name: String!
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
}

type SiteSettingsSubscriptionPayload {
  mutation: MutationType!
  node: SiteSettings
  updatedFields: [String!]
  previousValues: SiteSettingsPreviousValues
}

input SiteSettingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SiteSettingsWhereInput
  AND: [SiteSettingsSubscriptionWhereInput!]
  OR: [SiteSettingsSubscriptionWhereInput!]
  NOT: [SiteSettingsSubscriptionWhereInput!]
}

input SiteSettingsUpdateInput {
  name: String
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
}

input SiteSettingsUpdateManyMutationInput {
  name: String
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
}

input SiteSettingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  mail: String
  mail_not: String
  mail_in: [String!]
  mail_not_in: [String!]
  mail_lt: String
  mail_lte: String
  mail_gt: String
  mail_gte: String
  mail_contains: String
  mail_not_contains: String
  mail_starts_with: String
  mail_not_starts_with: String
  mail_ends_with: String
  mail_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  mapLongitude: Float
  mapLongitude_not: Float
  mapLongitude_in: [Float!]
  mapLongitude_not_in: [Float!]
  mapLongitude_lt: Float
  mapLongitude_lte: Float
  mapLongitude_gt: Float
  mapLongitude_gte: Float
  mapLatitude: Float
  mapLatitude_not: Float
  mapLatitude_in: [Float!]
  mapLatitude_not_in: [Float!]
  mapLatitude_lt: Float
  mapLatitude_lte: Float
  mapLatitude_gt: Float
  mapLatitude_gte: Float
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  AND: [SiteSettingsWhereInput!]
  OR: [SiteSettingsWhereInput!]
  NOT: [SiteSettingsWhereInput!]
}

input SiteSettingsWhereUniqueInput {
  id: ID
}

type Subscription {
  announcement(where: AnnouncementSubscriptionWhereInput): AnnouncementSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  new(where: NewSubscriptionWhereInput): NewSubscriptionPayload
  siteSettings(where: SiteSettingsSubscriptionWhereInput): SiteSettingsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
  news(where: NewWhereInput, orderBy: NewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [New!]
  announcements(where: AnnouncementWhereInput, orderBy: AnnouncementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Announcement!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
  news: NewCreateManyWithoutUserInput
  announcements: AnnouncementCreateManyWithoutUserInput
  events: EventCreateManyWithoutUserInput
}

input UserCreateOneWithoutAnnouncementsInput {
  create: UserCreateWithoutAnnouncementsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNewsInput {
  create: UserCreateWithoutNewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAnnouncementsInput {
  id: ID
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
  news: NewCreateManyWithoutUserInput
  events: EventCreateManyWithoutUserInput
}

input UserCreateWithoutEventsInput {
  id: ID
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
  news: NewCreateManyWithoutUserInput
  announcements: AnnouncementCreateManyWithoutUserInput
}

input UserCreateWithoutNewsInput {
  id: ID
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
  announcements: AnnouncementCreateManyWithoutUserInput
  events: EventCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  nameSurname_ASC
  nameSurname_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  userType_ASC
  userType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  nameSurname: String
  username: String!
  password: String!
  userType: UserType!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

enum UserType {
  ADMIN
  MODERATOR
}

input UserUpdateInput {
  nameSurname: String
  username: String
  password: String
  userType: UserType
  news: NewUpdateManyWithoutUserInput
  announcements: AnnouncementUpdateManyWithoutUserInput
  events: EventUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  nameSurname: String
  username: String
  password: String
  userType: UserType
}

input UserUpdateOneRequiredWithoutAnnouncementsInput {
  create: UserCreateWithoutAnnouncementsInput
  update: UserUpdateWithoutAnnouncementsDataInput
  upsert: UserUpsertWithoutAnnouncementsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutNewsInput {
  create: UserCreateWithoutNewsInput
  update: UserUpdateWithoutNewsDataInput
  upsert: UserUpsertWithoutNewsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAnnouncementsDataInput {
  nameSurname: String
  username: String
  password: String
  userType: UserType
  news: NewUpdateManyWithoutUserInput
  events: EventUpdateManyWithoutUserInput
}

input UserUpdateWithoutEventsDataInput {
  nameSurname: String
  username: String
  password: String
  userType: UserType
  news: NewUpdateManyWithoutUserInput
  announcements: AnnouncementUpdateManyWithoutUserInput
}

input UserUpdateWithoutNewsDataInput {
  nameSurname: String
  username: String
  password: String
  userType: UserType
  announcements: AnnouncementUpdateManyWithoutUserInput
  events: EventUpdateManyWithoutUserInput
}

input UserUpsertWithoutAnnouncementsInput {
  update: UserUpdateWithoutAnnouncementsDataInput!
  create: UserCreateWithoutAnnouncementsInput!
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithoutNewsInput {
  update: UserUpdateWithoutNewsDataInput!
  create: UserCreateWithoutNewsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nameSurname: String
  nameSurname_not: String
  nameSurname_in: [String!]
  nameSurname_not_in: [String!]
  nameSurname_lt: String
  nameSurname_lte: String
  nameSurname_gt: String
  nameSurname_gte: String
  nameSurname_contains: String
  nameSurname_not_contains: String
  nameSurname_starts_with: String
  nameSurname_not_starts_with: String
  nameSurname_ends_with: String
  nameSurname_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  userType: UserType
  userType_not: UserType
  userType_in: [UserType!]
  userType_not_in: [UserType!]
  news_every: NewWhereInput
  news_some: NewWhereInput
  news_none: NewWhereInput
  announcements_every: AnnouncementWhereInput
  announcements_some: AnnouncementWhereInput
  announcements_none: AnnouncementWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
