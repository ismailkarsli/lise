type AggregateEvent {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSiteSettings {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Event {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  startDate: DateTime
  endDate: DateTime
  viewCount: Int!
  likeCount: Int!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
  user: UserCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutUserInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  photo_ASC
  photo_DESC
  content_ASC
  content_DESC
  publishDate_ASC
  publishDate_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  viewCount_ASC
  viewCount_DESC
  likeCount_ASC
  likeCount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  publishDate: DateTime!
  startDate: DateTime
  endDate: DateTime
  viewCount: Int!
  likeCount: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input EventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
  user: UserUpdateOneRequiredWithoutEventsInput
}

input EventUpdateManyDataInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
}

input EventUpdateManyMutationInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
}

input EventUpdateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutUserDataInput {
  title: String
  slug: String
  photo: String
  content: String
  publishDate: DateTime
  startDate: DateTime
  endDate: DateTime
  viewCount: Int
  likeCount: Int
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutUserDataInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutUserDataInput!
  create: EventCreateWithoutUserInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

type Link {
  id: ID!
  title: String!
  url: String!
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  title: String!
  url: String!
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
}

type LinkPreviousValues {
  id: ID!
  title: String!
  url: String!
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateInput {
  title: String
  url: String
}

input LinkUpdateManyMutationInput {
  title: String
  url: String
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createSiteSettings(data: SiteSettingsCreateInput!): SiteSettings!
  updateSiteSettings(data: SiteSettingsUpdateInput!, where: SiteSettingsWhereUniqueInput!): SiteSettings
  updateManySiteSettingses(data: SiteSettingsUpdateManyMutationInput!, where: SiteSettingsWhereInput): BatchPayload!
  upsertSiteSettings(where: SiteSettingsWhereUniqueInput!, create: SiteSettingsCreateInput!, update: SiteSettingsUpdateInput!): SiteSettings!
  deleteSiteSettings(where: SiteSettingsWhereUniqueInput!): SiteSettings
  deleteManySiteSettingses(where: SiteSettingsWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  postType: PostType!
  publishDate: DateTime!
  viewCount: Int!
  likeCount: Int!
  eventStartDate: DateTime
  eventEndDate: DateTime
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  postType: PostType!
  publishDate: DateTime!
  viewCount: Int
  likeCount: Int
  eventStartDate: DateTime
  eventEndDate: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutUserInput {
  id: ID
  title: String!
  slug: String!
  photo: String
  content: String
  postType: PostType!
  publishDate: DateTime!
  viewCount: Int
  likeCount: Int
  eventStartDate: DateTime
  eventEndDate: DateTime
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  photo_ASC
  photo_DESC
  content_ASC
  content_DESC
  postType_ASC
  postType_DESC
  publishDate_ASC
  publishDate_DESC
  viewCount_ASC
  viewCount_DESC
  likeCount_ASC
  likeCount_DESC
  eventStartDate_ASC
  eventStartDate_DESC
  eventEndDate_ASC
  eventEndDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  slug: String!
  photo: String
  content: String
  postType: PostType!
  publishDate: DateTime!
  viewCount: Int!
  likeCount: Int!
  eventStartDate: DateTime
  eventEndDate: DateTime
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  postType: PostType
  postType_not: PostType
  postType_in: [PostType!]
  postType_not_in: [PostType!]
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  eventStartDate: DateTime
  eventStartDate_not: DateTime
  eventStartDate_in: [DateTime!]
  eventStartDate_not_in: [DateTime!]
  eventStartDate_lt: DateTime
  eventStartDate_lte: DateTime
  eventStartDate_gt: DateTime
  eventStartDate_gte: DateTime
  eventEndDate: DateTime
  eventEndDate_not: DateTime
  eventEndDate_in: [DateTime!]
  eventEndDate_not_in: [DateTime!]
  eventEndDate_lt: DateTime
  eventEndDate_lte: DateTime
  eventEndDate_gt: DateTime
  eventEndDate_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

enum PostType {
  NEWS
  ANNOUNCEMENTS
}

input PostUpdateInput {
  title: String
  slug: String
  photo: String
  content: String
  postType: PostType
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
  eventStartDate: DateTime
  eventEndDate: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  slug: String
  photo: String
  content: String
  postType: PostType
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
  eventStartDate: DateTime
  eventEndDate: DateTime
}

input PostUpdateManyMutationInput {
  title: String
  slug: String
  photo: String
  content: String
  postType: PostType
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
  eventStartDate: DateTime
  eventEndDate: DateTime
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutUserDataInput {
  title: String
  slug: String
  photo: String
  content: String
  postType: PostType
  publishDate: DateTime
  viewCount: Int
  likeCount: Int
  eventStartDate: DateTime
  eventEndDate: DateTime
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  postType: PostType
  postType_not: PostType
  postType_in: [PostType!]
  postType_not_in: [PostType!]
  publishDate: DateTime
  publishDate_not: DateTime
  publishDate_in: [DateTime!]
  publishDate_not_in: [DateTime!]
  publishDate_lt: DateTime
  publishDate_lte: DateTime
  publishDate_gt: DateTime
  publishDate_gte: DateTime
  viewCount: Int
  viewCount_not: Int
  viewCount_in: [Int!]
  viewCount_not_in: [Int!]
  viewCount_lt: Int
  viewCount_lte: Int
  viewCount_gt: Int
  viewCount_gte: Int
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  eventStartDate: DateTime
  eventStartDate_not: DateTime
  eventStartDate_in: [DateTime!]
  eventStartDate_not_in: [DateTime!]
  eventStartDate_lt: DateTime
  eventStartDate_lte: DateTime
  eventStartDate_gt: DateTime
  eventStartDate_gte: DateTime
  eventEndDate: DateTime
  eventEndDate_not: DateTime
  eventEndDate_in: [DateTime!]
  eventEndDate_not_in: [DateTime!]
  eventEndDate_lt: DateTime
  eventEndDate_lte: DateTime
  eventEndDate_gt: DateTime
  eventEndDate_gte: DateTime
  user: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  siteSettings(where: SiteSettingsWhereUniqueInput!): SiteSettings
  siteSettingses(where: SiteSettingsWhereInput, orderBy: SiteSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SiteSettings]!
  siteSettingsesConnection(where: SiteSettingsWhereInput, orderBy: SiteSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SiteSettingsConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type SiteSettings {
  id: ID!
  name: String!
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
  aboutShort: String
  classCount: Int
  studentCount: Int
  teacherCount: Int
}

type SiteSettingsConnection {
  pageInfo: PageInfo!
  edges: [SiteSettingsEdge]!
  aggregate: AggregateSiteSettings!
}

input SiteSettingsCreateInput {
  id: ID
  name: String!
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
  aboutShort: String
  classCount: Int
  studentCount: Int
  teacherCount: Int
}

type SiteSettingsEdge {
  node: SiteSettings!
  cursor: String!
}

enum SiteSettingsOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  mail_ASC
  mail_DESC
  address_ASC
  address_DESC
  mapLongitude_ASC
  mapLongitude_DESC
  mapLatitude_ASC
  mapLatitude_DESC
  about_ASC
  about_DESC
  aboutShort_ASC
  aboutShort_DESC
  classCount_ASC
  classCount_DESC
  studentCount_ASC
  studentCount_DESC
  teacherCount_ASC
  teacherCount_DESC
}

type SiteSettingsPreviousValues {
  id: ID!
  name: String!
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
  aboutShort: String
  classCount: Int
  studentCount: Int
  teacherCount: Int
}

type SiteSettingsSubscriptionPayload {
  mutation: MutationType!
  node: SiteSettings
  updatedFields: [String!]
  previousValues: SiteSettingsPreviousValues
}

input SiteSettingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SiteSettingsWhereInput
  AND: [SiteSettingsSubscriptionWhereInput!]
  OR: [SiteSettingsSubscriptionWhereInput!]
  NOT: [SiteSettingsSubscriptionWhereInput!]
}

input SiteSettingsUpdateInput {
  name: String
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
  aboutShort: String
  classCount: Int
  studentCount: Int
  teacherCount: Int
}

input SiteSettingsUpdateManyMutationInput {
  name: String
  phone: String
  mail: String
  address: String
  mapLongitude: Float
  mapLatitude: Float
  about: String
  aboutShort: String
  classCount: Int
  studentCount: Int
  teacherCount: Int
}

input SiteSettingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  mail: String
  mail_not: String
  mail_in: [String!]
  mail_not_in: [String!]
  mail_lt: String
  mail_lte: String
  mail_gt: String
  mail_gte: String
  mail_contains: String
  mail_not_contains: String
  mail_starts_with: String
  mail_not_starts_with: String
  mail_ends_with: String
  mail_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  mapLongitude: Float
  mapLongitude_not: Float
  mapLongitude_in: [Float!]
  mapLongitude_not_in: [Float!]
  mapLongitude_lt: Float
  mapLongitude_lte: Float
  mapLongitude_gt: Float
  mapLongitude_gte: Float
  mapLatitude: Float
  mapLatitude_not: Float
  mapLatitude_in: [Float!]
  mapLatitude_not_in: [Float!]
  mapLatitude_lt: Float
  mapLatitude_lte: Float
  mapLatitude_gt: Float
  mapLatitude_gte: Float
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  aboutShort: String
  aboutShort_not: String
  aboutShort_in: [String!]
  aboutShort_not_in: [String!]
  aboutShort_lt: String
  aboutShort_lte: String
  aboutShort_gt: String
  aboutShort_gte: String
  aboutShort_contains: String
  aboutShort_not_contains: String
  aboutShort_starts_with: String
  aboutShort_not_starts_with: String
  aboutShort_ends_with: String
  aboutShort_not_ends_with: String
  classCount: Int
  classCount_not: Int
  classCount_in: [Int!]
  classCount_not_in: [Int!]
  classCount_lt: Int
  classCount_lte: Int
  classCount_gt: Int
  classCount_gte: Int
  studentCount: Int
  studentCount_not: Int
  studentCount_in: [Int!]
  studentCount_not_in: [Int!]
  studentCount_lt: Int
  studentCount_lte: Int
  studentCount_gt: Int
  studentCount_gte: Int
  teacherCount: Int
  teacherCount_not: Int
  teacherCount_in: [Int!]
  teacherCount_not_in: [Int!]
  teacherCount_lt: Int
  teacherCount_lte: Int
  teacherCount_gt: Int
  teacherCount_gte: Int
  AND: [SiteSettingsWhereInput!]
  OR: [SiteSettingsWhereInput!]
  NOT: [SiteSettingsWhereInput!]
}

input SiteSettingsWhereUniqueInput {
  id: ID
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  siteSettings(where: SiteSettingsSubscriptionWhereInput): SiteSettingsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  password: String!
  userType: UserType!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  userType: UserType!
  posts: PostCreateManyWithoutUserInput
  events: EventCreateManyWithoutUserInput
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEventsInput {
  id: ID
  username: String!
  password: String!
  userType: UserType!
  posts: PostCreateManyWithoutUserInput
}

input UserCreateWithoutPostsInput {
  id: ID
  username: String!
  password: String!
  userType: UserType!
  events: EventCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  userType_ASC
  userType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  userType: UserType!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

enum UserType {
  ADMIN
  MODERATOR
}

input UserUpdateInput {
  username: String
  password: String
  userType: UserType
  posts: PostUpdateManyWithoutUserInput
  events: EventUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  userType: UserType
}

input UserUpdateOneRequiredWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutEventsDataInput {
  username: String
  password: String
  userType: UserType
  posts: PostUpdateManyWithoutUserInput
}

input UserUpdateWithoutPostsDataInput {
  username: String
  password: String
  userType: UserType
  events: EventUpdateManyWithoutUserInput
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  userType: UserType
  userType_not: UserType
  userType_in: [UserType!]
  userType_not_in: [UserType!]
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
